为什么要使用泛型：
 存储到集合中的元素   但是取出来的都是Object类型的，此时就得强转
 约束存储到集合中的元素必须是相同的数据类型（相同的数据类型才能做比较）
 设计一个点（point）类 来封装坐标位置 要求坐标位置支持String类型 Integer类型 Double类 这是非常不优雅的设计
 
 泛型（Generic Type）：从java5开始迟滞的信的语法
 什么是泛型：  广泛通用的类型
 代码模板中类型不确定 谁调用该段代码 谁指明类型是什么
 在类中 如果不确定是什么类型  就用T来表示  由类的调用者来决定
 T：type 类型    E：Element 元素  K：key  V：value
 集合类中如果泛型不设置  默认是object类型
 在本类中ooxx表示一种类型 该类型具体是什么 由类的调用者来决定
 
 泛型类：直接在接口/类上定义的泛型
 使用泛型：
 List<String> list  = new ArratList<String>(); 该List集合中只能存储String类型的元素
 因为前后类型相同 所以从java7开始推出了泛型的菱形语法<>.
 现在的写法是List<String> list  = new ArratList<>(); 
 泛型不存在继承 的关系（前后尖括号中的类型必须一致）
 底层其实没有泛型 使用的是强转 语法糖
 
 泛型方法：在方法上声明泛型
 情况1：泛型类中的泛型只能使用于非静态方法 如果需要给静态方法设置泛型 此时使用泛型方法
 情况2：泛型类中的泛型应该使用于整个类中多个方法 有时候只对某一个方法设置泛型即可
 一般把自定义的泛型作为该方法的返回类型 才有意义
此时的泛型必须是由参数设置进来的
如果没哟与参数来设置泛型的具体类型 此时的方法一般返回设计为Object即可

泛型的通配符 ：不知道用什么类型来接收的时候 此时可以使用？，？表示未知
 
 